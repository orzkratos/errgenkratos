package codegen

import (
	"fmt"
	"strings"
	"unicode"

	"github.com/go-kratos/kratos/v2/errors"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const (
	errorsPackage       = protogen.GoImportPath("github.com/go-kratos/kratos/v2/errors")
	errgenkratosPackage = protogen.GoImportPath("github.com/orzkratos/errgenkratos")
)

var enCases = cases.Title(language.AmericanEnglish, cases.NoLower)

// Config holds generation configuration
type Config struct {
	GeneratorName string // e.g. "protoc-gen-go-errors" or "protoc-gen-orzkratos-errors"
	IncludeNested bool   // Include nested enums in generation
}

// GenerateFile generates a _errors.pb.go file containing kratos errors definitions
// This is the main entry point for error code generation from protobuf files
//
// 从 protobuf 文件生成包含 kratos 错误定义的 _errors.pb.go 文件
// 这是从 protobuf 文件生成错误代码的主要入口点
func GenerateFile(gen *protogen.Plugin, file *protogen.File, config Config) *protogen.GeneratedFile {
	// Collect enums based on configuration
	// IncludeNested=true: collect both top-level and nested enums (recursive)
	// IncludeNested=false: collect only top-level enums
	//
	// 根据配置收集枚举
	// IncludeNested=true: 收集顶级和嵌套枚举（递归）
	// IncludeNested=false: 仅收集顶级枚举
	var enums []*protogen.Enum
	if config.IncludeNested {
		enums = collectTopLevelAndNestedEnums(file)
	} else {
		enums = file.Enums // Only top-level enums, no nested ones // 仅顶级枚举，不包含嵌套
	}

	// Skip generation if no enums with error codes found
	// 如果没有找到包含错误码的枚举，跳过生成
	if len(enums) == 0 {
		return nil
	}

	// Create output file with standard naming convention
	// 使用标准命名约定创建输出文件
	filename := file.GeneratedFilenamePrefix + "_errors.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	// Generate file header with package and imports
	// 生成文件头部，包含包名和导入
	g.P("// Code generated by ", config.GeneratorName, ". DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// Import required packages for error handling
	// 导入错误处理所需的包
	g.QualifiedGoIdent(errorsPackage.Ident(""))
	g.QualifiedGoIdent(errgenkratosPackage.Ident(""))

	// Generate error handling functions for collected enums
	// 为收集到的枚举生成错误处理函数
	generateFileContent(gen, file, g, enums)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, enums []*protogen.Enum) {
	if len(enums) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the kratos package it is being compiled against.")
	g.P("const _ = ", errorsPackage.Ident("SupportPackageIsVersion1"))
	g.P()
	index := 0
	for _, enum := range enums {
		if !genErrorsReason(gen, file, g, enum) {
			index++
		}
	}
	// If all enums do not contain 'errors.code', the current file is skipped
	if index == 0 {
		g.Skip()
	}
}

func collectTopLevelAndNestedEnums(file *protogen.File) []*protogen.Enum {
	var enums []*protogen.Enum
	enums = append(enums, file.Enums...)
	for _, message := range file.Messages {
		enums = append(enums, collectMessageEnums(message)...)
	}
	return enums
}

func collectMessageEnums(message *protogen.Message) []*protogen.Enum {
	var enums []*protogen.Enum
	enums = append(enums, message.Enums...)
	for _, nestedMessage := range message.Messages {
		enums = append(enums, collectMessageEnums(nestedMessage)...)
	}
	return enums
}

func genErrorsReason(_ *protogen.Plugin, _ *protogen.File, g *protogen.GeneratedFile, enum *protogen.Enum) bool {
	defaultCode := proto.GetExtension(enum.Desc.Options(), errors.E_DefaultCode)
	code := 0
	if ok := defaultCode.(int32); ok != 0 {
		code = int(ok)
	}
	if code > 600 || code < 0 {
		panic(fmt.Sprintf("Enum '%s' range must be greater than 0 and less than or equal to 600", string(enum.Desc.Name())))
	}
	var ew errorWrapper
	for _, v := range enum.Values {
		enumCode := code
		eCode := proto.GetExtension(v.Desc.Options(), errors.E_Code)
		if ok := eCode.(int32); ok != 0 {
			enumCode = int(ok)
		}
		// If the current enumeration does not contain 'errors.code'
		// or the code value exceeds the range, the current enum will be skipped
		if enumCode > 600 || enumCode < 0 {
			panic(fmt.Sprintf("Enum '%s' range must be greater than 0 and less than or equal to 600", string(v.Desc.Name())))
		}
		if enumCode == 0 {
			continue
		}

		comment := v.Comments.Leading.String()
		if comment == "" {
			comment = v.Comments.Trailing.String()
		}

		name, value, camelValue := string(enum.Desc.Name()), string(v.Desc.Name()), case2Camel(string(v.Desc.Name()))
		if parent := enum.Desc.Parent(); parent != nil && parent.Parent() != nil {
			name, value = "", string(parent.Name())+"_"+string(v.Desc.Name())
			camelValue = case2Camel(string(parent.Name())) + case2Camel(string(v.Desc.Name()))
		}

		err := &errorInfo{
			Name:       name,
			Value:      value,
			CamelValue: camelValue,
			HTTPCode:   enumCode,
			Comment:    comment,
			HasComment: len(comment) > 0,
			EnumValue:  int(v.Desc.Number()),
		}
		ew.Errors = append(ew.Errors, err)
	}
	if len(ew.Errors) == 0 {
		return true
	}
	g.P(ew.execute())

	return false
}

func case2Camel(name string) string {
	if !strings.Contains(name, "_") {
		if name == strings.ToUpper(name) {
			name = strings.ToLower(name)
		}
		return enCases.String(name)
	}
	strs := strings.Split(name, "_")
	words := make([]string, 0, len(strs))
	for _, w := range strs {
		hasLower := false
		for _, r := range w {
			if unicode.IsLower(r) {
				hasLower = true
				break
			}
		}
		if !hasLower {
			w = strings.ToLower(w)
		}
		w = enCases.String(w)
		words = append(words, w)
	}

	return strings.Join(words, "")
}
